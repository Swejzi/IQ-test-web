version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: iq-test-postgres
    environment:
      POSTGRES_DB: iq_test_db
      POSTGRES_USER: iq_test_user
      POSTGRES_PASSWORD: iq_test_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - iq-test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iq_test_user -d iq_test_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: iq-test-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - iq-test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: iq-test-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://iq_test_user:iq_test_password@postgres:5432/iq_test_db
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      PORT: 3001
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - iq-test-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: iq-test-frontend
    environment:
      REACT_APP_API_URL: http://localhost:3001/api
      REACT_APP_WS_URL: ws://localhost:3001
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - iq-test-network
    depends_on:
      - backend
    command: npm start

  # PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: iq-test-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@iqtest.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    networks:
      - iq-test-network
    depends_on:
      - postgres

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: iq-test-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - iq-test-network
    depends_on:
      - redis

volumes:
  postgres_data:
  redis_data:

networks:
  iq-test-network:
    driver: bridge
